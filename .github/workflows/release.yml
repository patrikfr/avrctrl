on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      version:
        description: Dev
        default: v0.2
        required: true

name: Package and Build Release Asset Native Image

jobs:
  build:
    name: Build GraalVM Native Image
    runs-on: ubuntu-latest #macos-11.0

    steps:
      - name: Checkout manual version
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.version }}
        if: github.event.inputs.version != ''

      - name: Checkout triggered ref
        uses: actions/checkout@v2
        if: github.event.inputs.version == ''

      - name: Get Version Number, strip v prefix
        run: echo "VERSION=${TAG:1}" >> $GITHUB_ENV
        if: github.event.inputs.version == ''
        env:
          TAG: ${{ github.event.ref }}

      - name: Get Version Number, manual input
        run: echo "VERSION=${TAG:1}" >> $GITHUB_ENV
        if: github.event.inputs.version != ''
        env:
          TAG: ${{ github.event.inputs.version }}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Install Graal VM
        uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 20.2.0
          native-image: true

      - name: Build native image
        run: native-image --no-server --no-fallback -jar target/avr-ctrl-${{ env.VERSION }}.jar avrctrl

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: avrctrl-macos-binary
          path: avrctrl
          retention-days: 1

  release:
    name: Create Release and Upload Binary
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.version == '' #Don't release manual triggers

    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - uses: actions/download-artifact@v2
        with:
          name: avrctrl-macos-binary

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: avrctrl
          asset_name: avrctrl
          asset_content_type: application/octet-stream